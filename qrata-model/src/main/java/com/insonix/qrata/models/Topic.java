package com.insonix.qrata.models;

// Generated Feb 6, 2013 11:51:22 AM by Hibernate Tools 3.4.0.CR1

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.Index;

/**
 * Topics generated by hbm2java
 */
@Entity
@Table(name = "topics", schema = "public")
@Cache(usage=CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
public class Topic extends CommonEntity implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -3333410481175799150L;
	
	private int id;
	private String name;
	private Short topicType;
	private Topic parentTopic;
	private boolean leafNode = false;
	private List<Topic> childTopics;
	private Category category;
	private List<Site> sites = new ArrayList<Site>(0);
	private Set<TopicRatingCriteria> topicRatingCriterias = new HashSet<>();
	private List<SiteReviewRatingCriteria> siteReviewRatingCriterias = new ArrayList<>();
	private TopicExpertAssignment topicExpertAssignment;
		
	public Topic() {
	}

	public Topic(int id) {
		this.id = id;
	}


	@Id
	@GeneratedValue(strategy=GenerationType.SEQUENCE, generator="topics_id_seq")
	@SequenceGenerator(name="topics_id_seq", initialValue=1, sequenceName="topics_id_seq", allocationSize=1)
	@Column(name = "id", unique = true, nullable = false)
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	
	@ManyToOne(fetch = FetchType.LAZY , cascade = CascadeType.PERSIST)
	@JoinColumn(name = "category_id")
	public Category getCategory() {
		return this.category;
	}

	public void setCategory(Category category) {
		this.category = category;
	}

	@Column(name = "name", length = 100)
	@Index(name="topics_name_idx")
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
		this.setSortName(this.name);
	}

	@Override
	public void setSortName(String sortName){
		super.setSortName(sortName);
	}
	
	@Column(name = "topic_type")
	public Short getTopicType() {
		return this.topicType;
	}

	public void setTopicType(Short topicType) {
		this.topicType = topicType;
	}

	
	@ManyToMany(fetch=FetchType.LAZY, cascade=CascadeType.ALL)
	@JoinTable(name="topics_sites", joinColumns={@JoinColumn(name="topic_id", nullable=false)},
			inverseJoinColumns={@JoinColumn(name="site_id", nullable=false)})
	@Cache(usage=CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
	/**
	 * @return the topicSites
	 */	
	public List<Site> getSites() {
		return sites;
	}

	/**
	 * @param topicSites the topicSites to set
	 */
	public void setSites(List<Site> sites) {
		this.sites = sites;
	}

	
	
	@ManyToOne(fetch=FetchType.LAZY , cascade = CascadeType.PERSIST)
	public Topic getParentTopic() {
		return parentTopic;
	}

	/**
	 * @param parentCategory the parentCategory to set
	 */
	public void setParentTopic(Topic parentTopic) {
		this.parentTopic = parentTopic;
	}
	
	@Column(name = "leaf_node" )
	public boolean getLeafNode() {
		return leafNode;
	}

	public void setLeafNode(boolean leafNode) {
		this.leafNode = leafNode;
	}

	@OneToMany(cascade=CascadeType.ALL,fetch=FetchType.LAZY,mappedBy="parentTopic")
	@Cache(usage=CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
	public List<Topic> getChildTopics() {
		return childTopics;
	}

	/**
	 * @param childTopics the childTopics to set
	 */
	public void setChildTopics(List<Topic> childTopics) {
		this.childTopics = childTopics;
	}

	
	@OneToMany(fetch=FetchType.LAZY, cascade=CascadeType.ALL, mappedBy="topic")
	@Cache(usage=CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
	/**
	 * @return the topicRatingCriterias
	 */
	public Set<TopicRatingCriteria> getTopicRatingCriterias() {
		return topicRatingCriterias;
	}

	/**
	 * @param topicRatingCriterias the topicRatingCriterias to set
	 */
	public void setTopicRatingCriterias(
			Set<TopicRatingCriteria> topicRatingCriterias) {
		this.topicRatingCriterias = topicRatingCriterias;
	}

	
	@OneToMany(fetch=FetchType.LAZY, cascade=CascadeType.ALL, mappedBy="topics")
	@Cache(usage=CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
	public List<SiteReviewRatingCriteria> getSiteReviewRatingCriterias() {
		return siteReviewRatingCriterias;
	}	

	public void setSiteReviewRatingCriterias(
			List<SiteReviewRatingCriteria> siteReviewRatingCriterias) {
		this.siteReviewRatingCriterias = siteReviewRatingCriterias;
	}

	@OneToOne(fetch=FetchType.LAZY, cascade=CascadeType.ALL, mappedBy="topic")
	public TopicExpertAssignment getTopicExpertAssignment() {
		return topicExpertAssignment;
	}
	
	public void setTopicExpertAssignment(TopicExpertAssignment topicExpertAssignment) {
		this.topicExpertAssignment = topicExpertAssignment;
	}
	
	

	@Override
	public int hashCode() {
		return HashCodeBuilder.reflectionHashCode(this);
	}

	@Override
	public boolean equals(Object obj) {
		return EqualsBuilder.reflectionEquals(this, obj);
	}

	@Override
	public String toString() {
		return "Topic [id=" + id + ", name=" + name + ", topicType=" + topicType + ", category="
				+ category + ", topicExpertAssignment=" + topicExpertAssignment + "]";
	}

}